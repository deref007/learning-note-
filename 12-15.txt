class关键字后面跟类的名称就定义了一个类
定义一个特殊的方法__init__(self)，理解成类初始化时候 创造或者带入几个类的全局变量
self.commit_id=None
从self后面的参数开始均可以设置变长参数、默认值等，相应的实例化过程中可以传入默认的参数

python中None表示的是一个空值的对象

两种类的定义的不同：
class Student：
      def __init__(self):
            self.name=none
class Student:
       def __init__(self,name)
              self.name=name

#分析：
    前者在__init__方法中，只有一个self，指的是实例本身，但是在方法的内部包含一个属性
    后者是在定义方法时候，就直接给了两个参数
实例化方法的不同：
    前者：需要实例化之后，再对属性赋值
    后者：实例化时就可以直接进行赋值
区别：前者：定义了这样的一种类，他可以是一个空的结构，提前有了相应的属性，当新的数据来的
时候，可以直接添加进来。可以很方便的进行。
          后者：则需要必须传值，不允许为空，适合于对于已有的数据导入。

config的理解：
为什么要使用配置模块：
将配置与代码分离是一个非常好的做法，通常我们将配置文件写成一个json文件，存放在项目的根目录
conf：多用于存取硬件驱动程序的安装配置信息

*args与**kwargs的理解:

def inner(*args,**kwarges):
      return func(*args,**kwargs)

二者用于函数的定义，可以将不定量的参数传递到函数，用在不知道多少参数传递的情况

两者都是python中的可变参数
*args表示任何多个无名参数，本质上是一个tuple
**kwargs表示关键字参数，本质上是一个dict

git log命令：
--pretty=format:""
%H 提交对象的id（完整哈希字符串）
%h 简短哈希字符串
%an 作者的名字
%ae 作者的电子邮件地址
%ad 作者的修订日期
%cn 提交者的名字
%ce 提交者的电子邮件地址
%cd 提交日期
%s 提交说明

git log --stat可以展现出git diff的效果

装饰器函数：-wrapper
 python的高阶学习
闭包
闭包:在内部函数里，对在外部作用域的变量进行引用，这个内部函数就称为闭包
闭包又被称为引用了自由变量的函数
内部函数和自由变量（定义在外部函数内但同时被内部函数引用或调用的变量称为自由变量）同时存在
构成一个闭包实体。
闭包的作用：可以使闭包实体脱离创建他的环境运行。就是变量和函数脱离了创建它的环境依然存在。
类似于面向对象
闭包的语法：一个函数A内创建了一个函数B，并且函数A返回了函数B，函数B就是闭包，函数A内的变量叫自由变量，包括A的参数。

装饰器
装饰器本质上是一个函数，一个用来包装函数的函数，返回被包装的函数对象
被包装的函数需要作为装饰器函数的参数

装饰器：装饰器内的操作在创建装饰器实例时已经运行，可以理解成class的实例化，如果在实例化有
print操作，在实例调用时不会再有。
装饰器传递的是自由变量和闭包，可以理解为class的实例属性和方法，实例调用时，属性一直存在
myfunc（）第一次运行时相当于初始化了装饰器，后面只是调用实例。

总结：装饰器函数真的类似于面向对象
装饰器在第一次运行时相当于实例化class，实例化可以有操作和属性，操作不被传递，属性被传递。













